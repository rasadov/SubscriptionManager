// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/rasadov/subscription-manager/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type SubscriptionRepository struct {
	mock.Mock
}

// CalculateTotalCost provides a mock function with given fields: ctx, userID, serviceName, startDate, endDate
func (_m *SubscriptionRepository) CalculateTotalCost(ctx context.Context, userID string, serviceName string, startDate *time.Time, endDate *time.Time) (int64, error) {
	ret := _m.Called(ctx, userID, serviceName, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for CalculateTotalCost")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *time.Time, *time.Time) (int64, error)); ok {
		return rf(ctx, userID, serviceName, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *time.Time, *time.Time) int64); ok {
		r0 = rf(ctx, userID, serviceName, startDate, endDate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, userID, serviceName, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, subscription
func (_m *SubscriptionRepository) CreateSubscription(ctx context.Context, subscription *models.Subscription) error {
	ret := _m.Called(ctx, subscription)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Subscription) error); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: ctx, id
func (_m *SubscriptionRepository) DeleteSubscription(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscription provides a mock function with given fields: ctx, id
func (_m *SubscriptionRepository) GetSubscription(ctx context.Context, id int) (*models.Subscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *models.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Subscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Subscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, page, elements, userID, serviceName, startDateFrom, startDateTo, endDateFrom, endDateTo, sortBy, sortOrder
func (_m *SubscriptionRepository) ListSubscriptions(ctx context.Context, page int, elements int, userID *string, serviceName *string, startDateFrom *time.Time, startDateTo *time.Time, endDateFrom *time.Time, endDateTo *time.Time, sortBy *string, sortOrder *string) ([]*models.Subscription, int64, error) {
	ret := _m.Called(ctx, page, elements, userID, serviceName, startDateFrom, startDateTo, endDateFrom, endDateTo, sortBy, sortOrder)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 []*models.Subscription
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *string, *string, *time.Time, *time.Time, *time.Time, *time.Time, *string, *string) ([]*models.Subscription, int64, error)); ok {
		return rf(ctx, page, elements, userID, serviceName, startDateFrom, startDateTo, endDateFrom, endDateTo, sortBy, sortOrder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *string, *string, *time.Time, *time.Time, *time.Time, *time.Time, *string, *string) []*models.Subscription); ok {
		r0 = rf(ctx, page, elements, userID, serviceName, startDateFrom, startDateTo, endDateFrom, endDateTo, sortBy, sortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *string, *string, *time.Time, *time.Time, *time.Time, *time.Time, *string, *string) int64); ok {
		r1 = rf(ctx, page, elements, userID, serviceName, startDateFrom, startDateTo, endDateFrom, endDateTo, sortBy, sortOrder)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *string, *string, *time.Time, *time.Time, *time.Time, *time.Time, *string, *string) error); ok {
		r2 = rf(ctx, page, elements, userID, serviceName, startDateFrom, startDateTo, endDateFrom, endDateTo, sortBy, sortOrder)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateSubscription provides a mock function with given fields: ctx, id, subscription
func (_m *SubscriptionRepository) UpdateSubscription(ctx context.Context, id int, subscription *models.Subscription) error {
	ret := _m.Called(ctx, id, subscription)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Subscription) error); ok {
		r0 = rf(ctx, id, subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionRepository creates a new instance of SubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepository {
	mock := &SubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
